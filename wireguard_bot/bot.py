import logging
from aiogram import Bot, Dispatcher, executor, types
from utils import wg_utils, json_db
import os
from datetime import datetime
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from wireguard_bot.utils.notifier import send_notifications
from wireguard_bot.utils.disabler import disable_expired_peers

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

admins_db = json_db.JsonDB("wireguard_bot/config/admins.json")
peers_db = json_db.JsonDB("wireguard_bot/config/peers.json")
archive_db = json_db.JsonDB("wireguard_bot/config/archive.json")
last_ip_db = json_db.JsonDB("wireguard_bot/config/last_ip.json")

def is_admin(user_id: int) -> bool:
    return user_id in admins_db.get("admins", [])

@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WireGuard Bot!\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add name, dd.mm.yyyy ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        "/remove idN ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/edit idN dd.mm.yyyy ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫\n"
        "/info idN ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "/reload ‚Äî –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
    )

@dp.message_handler(commands=["add"])
async def cmd_add(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    args = message.get_args()
    if not args or "," not in args:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add –∏–º—è, –¥–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add ivan, 01.07.2025)")
        return

    try:
        name, date_str = args.split(",", 1)
        name = name.strip()
        expires = datetime.strptime(date_str.strip(), "%d.%m.%Y").strftime("%d.%m.%Y")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: dd.mm.yyyy")
        return

    client_id, config_text, client_data = wg_utils.generate_client_config(name, expires, last_ip_db, peers_db)
    peers_db.set(client_id, client_data)

    config_path = f"wireguard_bot/wg/clients/{client_id}.conf"
    with open(config_path, "w") as f:
        f.write(config_text)

    await message.reply_document(types.InputFile(config_path), caption=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{client_id}` –¥–æ–±–∞–≤–ª–µ–Ω.")

@dp.message_handler(commands=["list"])
async def cmd_list(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    users = peers_db.get_all()
    if not users:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = ""
    for uid, data in users.items():
        name = data["name"]
        expires = data["deactivate_date"]
        text += f"`{uid}`: {name} ‚Äî –¥–æ {expires} /edit {uid} /remove {uid} /info {uid}\n"
    await message.reply(text)

@dp.message_handler(commands=["remove"])
async def cmd_remove(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    uid = message.get_args().strip()
    user = peers_db.pop(uid)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    archive_db.set(uid, user)
    wg_utils.remove_peer(uid)
    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{uid}` –æ—Ç–∫–ª—é—á—ë–Ω –∏ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ –∞—Ä—Ö–∏–≤.")

@dp.message_handler(commands=["edit"])
async def cmd_edit(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    args = message.get_args().strip().split()
    if len(args) != 2:
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /edit idN dd.mm.yyyy")
        return

    uid, new_date = args
    try:
        datetime.strptime(new_date, "%d.%m.%Y")
    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: dd.mm.yyyy")
        return

    user = peers_db.get(uid) or archive_db.get(uid)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user["deactivate_date"] = new_date
    user["created_at"] = datetime.now().strftime("%d.%m.%Y")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∞—Ä—Ö–∏–≤–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if uid in archive_db.get_all():
        archive_db.pop(uid)
        peers_db.set(uid, user)
        wg_utils.apply_peer(uid, user)
        await message.reply(f"‚ôªÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{uid}` –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {new_date}")
    else:
        peers_db.set(uid, user)
        await message.reply(f"üìù –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{uid}` –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {new_date}")

@dp.message_handler(commands=["info"])
async def cmd_info(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    uid = message.get_args().strip()
    user = peers_db.get(uid) or archive_db.get(uid)
    if not user:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    info = (
        f"üë§ ID: `{uid}`\n"
        f"–ò–º—è: {user['name']}\n"
        f"IP: {user['ip']}\n"
        f"–°–æ–∑–¥–∞–Ω: {user['created_at']}\n"
        f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {user['deactivate_date']}\n"
    )
    await message.reply(info)

@dp.message_handler(commands=["reload"])
async def cmd_reload(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    users = peers_db.get_all()
    now = datetime.now()
    expired = []

    for uid, user in users.items():
        expire_date = datetime.strptime(user["deactivate_date"], "%d.%m.%Y")
        if expire_date < now:
            expired.append(uid)

    for uid in expired:
        user = peers_db.pop(uid)
        archive_db.set(uid, user)
        wg_utils.remove_peer(uid)

    for uid, user in peers_db.get_all().items():
        wg_utils.apply_peer(uid, user)

    await message.reply(f"üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–∫–ª—é—á–µ–Ω–æ: {len(expired)}")
    
    # üîÅ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
async def schedule_daily_jobs():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(disable_expired_peers, "cron", hour=12, minute=0)
    scheduler.add_job(lambda: send_notifications(bot), "cron", hour=12, minute=0)
    scheduler.start()

async def on_startup(dp):
    await schedule_daily_jobs()


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
